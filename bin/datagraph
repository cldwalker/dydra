#!/usr/bin/env ruby
$:.unshift(File.expand_path(File.join(File.dirname(__FILE__), '..', 'lib')))
require 'datagraph'
require 'rdf/cli'

module Datagraph
  class CLI
    def initialize
      options = RDF::CLI.options do
        self.banner = "Usage: #{RDF::CLI.basename} [options] command [args...]"
        self.on('-d', '--debug',   'Enable debug output for troubleshooting.') do
          $DEBUG = true
        end
        self.on('-v', '--verbose', 'Enable verbose output. May be given more than once.') do
          $VERBOSE = true
        end
        self.on('-V', '--version', 'Display the Datagraph CLI version and exit.') do
          puts Datagraph::VERSION; exit
        end
      end
      abort options.banner if ARGV.empty?
    end

    def count(*resource_specs)
      Count.new.execute(*resource_specs)
    end

    def export(*resource_specs)
      Export.new.execute(*resource_specs)
    end

    def open(*resource_specs)
      Open.new.execute(*resource_specs)
    end

    def url(*resource_specs)
      URL.new.execute(*resource_specs)
    end

    ##
    # Base class for CLI commands.
    class Command
      include Datagraph::Client

      def basename
        RDF::CLI.basename
      end

      def validate_repository_specs(resource_specs)
        resources = validate_resource_specs(resource_specs)
        resources.each do |resource|
          unless resource.is_a?(Repository)
            abort "#{basename}: invalid repository spec `#{resource}'"
          end
        end
        resources
      end

      def validate_resource_specs(resource_specs)
        resources = []
        resource_specs.each do |resource_spec|
          case resource = Resource.new(resource_spec)
            when Account
              abort "#{basename}: unknown account `#{resource}'" unless resource.exists?
            when Repository
              abort "#{basename}: unknown account `#{resource.account}'" unless resource.account.exists?
              abort "#{basename}: unknown repository `#{resource}'" unless resource.exists?
            when nil
              abort "#{basename}: invalid resource spec `#{resource_spec}'"
          end
          resources << resource
        end
        resources
      end
    end

    ##
    # Outputs the number of statements in a repository.
    class Count < Command
      def execute(*resource_specs)
        repositories = validate_repository_specs(resource_specs)
        count = repositories.inject(0) do |count, repository|
          count += repository.count
        end
        puts count.to_s
      end
    end

    ##
    # Exports repository data in N-Triples format.
    class Export < Command
      def execute(*resource_specs)
        repositories = validate_repository_specs(resource_specs)
        RDF::NTriples::Writer.new($stdout) do |writer|
          repositories.each do |repository|
            repository.to_rdf.each { |statement| writer << statement }
          end
        end
      end
    end

    ##
    # Opens an account or a repository in a web browser.
    class Open < Command
      def execute(*resource_specs)
        begin
          require 'launchy'
        rescue LoadError => e
          abort "#{basename}: install the 'launchy' gem to use this command"
        end
        resources = validate_resource_specs(resource_specs)
        resources.each do |resource|
          Launchy.open(resource.url)
        end
      end
    end

    ##
    # Outputs the URL for an account or a repository.
    class URL < Command
      def execute(*resource_specs)
        resources = validate_resource_specs(resource_specs)
        resources.each do |resource|
          puts resource.url.to_s
        end
      end
    end
  end
end

begin
  Datagraph::CLI.new.send(command = ARGV.shift, *ARGV)
rescue NoMethodError => e
  abort "#{RDF::CLI.basename}: unknown command `#{command}'"
end
