#!/usr/bin/env ruby
$:.unshift(File.expand_path(File.join(File.dirname(__FILE__), '..', 'lib')))
require 'datagraph'
require 'rdf/cli'

module Datagraph
  class CLI
    BANNER = "Usage: #{RDF::CLI.basename} [options] command [args...]"

    def initialize
      options = {}
      optparser = RDF::CLI.options do
        self.banner = BANNER
        self.on('-d', '--debug',   'Enable debug output for troubleshooting.') do
          options[:debug] = true
        end
        self.on('-v', '--verbose', 'Enable verbose output. May be given more than once.') do
          options[:verbose] = true
        end
        self.on('-V', '--version', 'Display the Datagraph CLI version and exit.') do
          puts Datagraph::VERSION; exit
        end
      end
      Kernel.abort BANNER if ARGV.empty?
      @options = options
    end

    def help(command = nil)
      puts BANNER
      puts
      puts "Commands:"
      puts "    help        Shows this help."
      puts "    register    Registers a new user account."
      puts "    list        Lists existing repositories."
      puts "    open        Opens an account or a repository in a web browser."
      puts "    url         Outputs the URL of an account or a repository."
      puts "    create      Creates a new repository."
      puts "    rename      Renames a repository."
      puts "    drop        Destroys a repository permanently."
      puts "    clear       Deletes all data from a repository."
      puts "    count       Outputs the number of statements in a repository."
      puts "    query       Queries a repository."
      puts "    import      Imports data into a repository."
      puts "    export      Exports data from a repository in N-Triples format."
      puts "    status      Shows pending, running, and completed processes."
      puts "    abort       Aborts a pending or running process."
    end

    def register(account_name, password = nil)
      Command::Register.new(@options).execute(account_name, password)
    end

    def list(*resource_specs)
      Command::List.new(@options).execute(*resource_specs)
    end

    def open(*resource_specs)
      Command::Open.new(@options).execute(*resource_specs)
    end

    def url(*resource_specs)
      Command::URL.new(@options).execute(*resource_specs)
    end

    def create(*repository_specs)
      Command::Create.new(@options).execute(*repository_specs)
    end

    def rename(old_repository_spec, new_repository_spec)
      Command::Rename.new(@options).execute(old_repository_spec, new_repository_spec)
    end

    def drop(*repository_specs)
      Command::Drop.new(@options).execute(*repository_specs)
    end

    def clear(*repository_specs)
      Command::Clear.new(@options).execute(*repository_specs)
    end

    def count(*repository_specs)
      Command::Count.new(@options).execute(*repository_specs)
    end

    def query(repository_spec, query = nil)
      Command::Query.new(@options).execute(repository_spec, query)
    end

    def import(repository_spec, *urls)
      Command::Import.new(@options).execute(repository_spec, *urls)
    end

    def export(*resource_specs)
      Command::Export.new(@options).execute(*resource_specs)
    end

    def status(process_uuid = nil)
      Command::Status.new(@options).execute(process_uuid)
    end

    def abort(process_uuid)
      Command::Abort.new(@options).execute(process_uuid)
    end
  end
end

trap(:INT) { abort "" }

Datagraph::Client.setup!

begin
  Datagraph::CLI.new.send(command = ARGV.shift, *ARGV)
rescue NoMethodError => e
  RDF::CLI.abort "unknown command `#{command}'"
end
